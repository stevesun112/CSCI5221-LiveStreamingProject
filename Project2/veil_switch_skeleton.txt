//////////////////////////////////////////////////////////////////////////////
//    Server Port THREAD FUNCTION
//////////////////////////////////////////////////////////////////////////////
method serverThread(server_socket):
    while(True):
        // accept a new connection
        // receive the packet 
        processPacket(packet)
        // close the client socket
//////////////////////////////////////////////////////////////////////////////////////////////
//    Server THREAD FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////

// Adds an entry to rdv store, and also ensures that there are no duplicates
method addIfNODuplicateRDVENTRY(edge):
    // add a new entry to rendezvous store
    
// Finds a logically closest gateway for a given svid    
method findAGW(rendezvous_store,k,source):    
    // find the gateway to reach kth bucket that is logically closest to source vid
    return gw
//////////////////////////////////////////////////////////////////////////////
//    PROCESSPACKET FUNCTION
//////////////////////////////////////////////////////////////////////////////
method processPacket(packet):
    dst = getDest(packet)
    
    // forward the packet if I am not the destination
    if dst != myvid:
        routepacket(packet)
        return
    
    // I am the destination of the packet, so process it.
    packettype = getOperation(packet)
    src = getsrcvid (packet)
    payload = getpayload(packet)    
    if packettype == RDV_PUBLISH:
        dist = delta(myvid,payload)
        newedge = src ---> payload 
        addIfNODuplicateRDVENTRY(newedge)
        return
        
    else if packettype == RDV_QUERY:
        k = payload
        gw = findAGW(rendezvous_store,k,src)
        // if found then form the reply packet and send to svid
        if gw == NULL:
            // No gateway found
            return
        // create a RDV_REPLY packet and send it
        replypacket = createRDV_REPLY(gw, source)
        routepacket(replypacket)
        return
    elif packettype == RDV_REPLY:
        // Fill my routing table using this new information
        k = getPayload1(packet)
        gw = getPayload2(packet)
        // add new routing entry the routing table.
        nexthop = getNextHop(gw)

    else:
        print 'Unexpected Packet!!'
        
//////////////////////////////////////////////////////////////////////////////////////////////
//    SPROCESSPACKET FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
//    getNextHop function starts here
//////////////////////////////////////////////////////////////////////////////////////////////
method getNextHop(destvid):
    return nexthop
//////////////////////////////////////////////////////////////////////////////////////////////
//    getNextHop FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
//    sendPacket function starts here
//////////////////////////////////////////////////////////////////////////////////////////////
method sendPacket(packet,nexthop):
    // connect to 'nexthop' by opening a client socket 
    // send the packet to nexthop by writing the packet to socket
    // close the socket
//////////////////////////////////////////////////////////////////////////////////////////////
//    sendPacket FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
//    routepacket function starts here
//////////////////////////////////////////////////////////////////////////////////////////////

method routepacket(packet):
    dst = getDest(packet)
    // If it's me
    if dst == myvid:
        //'I am the destination!'
        processPacket(packet)
        return
    
    //If it's my physical Neighbor
    if dst in Physical Neighbor set:
        // send the packet directly
        sendPacket(packet,dst)
        return
    
    nexthop = NULL
    packettype = getOperation(packet)
    while nexthop == NULL:
        if dst in Physical Neighbor set:
            // send the packet directly
            sendPacket(packet,dst)
            return
        k = delta(myvid,dst)
        if k == 0:
            break
        if there is a nexthop for dst:
            nexthop = getNexthop(dst)
            break
        if (packettype != RDV_PUBLISH) and (packettype != RDV_QUERY):
            break 
        // flip the kth bit in dist
        dst = flipBit(dst,k)
    if dst == myvid:
        //print "I am the destination for this RDV Q/P message:"
        processPacket(packet)
    if nexthop == NULL:
        print 'No route to destination' 
        return
    sendPacket(packet,nexthop)

//////////////////////////////////////////////////////////////////////////////////////////////
//    routepacket FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////
//    Publish function starts here
//////////////////////////////////////////////////////////////////////////////////////////////

method publish(neighbor,k):
    dst = getRendezvousID(k,myvid)
    packet = createRDV_PUBLISH(neighbor,myvid,dst)
    routepacket(packet)

//////////////////////////////////////////////////////////////////////////////////////////////
//    Publish FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
//    Query function starts here
//////////////////////////////////////////////////////////////////////////////////////////////

method query(k):
    dst = getRendezvousID(k,myvid)
    packet = createRDV_QUERY(k,myvid,dst)
    routepacket(packet)

//////////////////////////////////////////////////////////////////////////////////////////////
//    Query FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////
//    RunARount function starts here
//////////////////////////////////////////////////////////////////////////////////////////////

method runARound(round):
    // start from round 2 since connectivity in round 1 is already learnt using the physical neighbors
    for i =2 to round+1:
        // see if routing entry for this round is already available in the routing table.
        // publish if I am the gateway to reach this bucket. publish(neighbor, i)
        // else query(i)

//////////////////////////////////////////////////////////////////////////////////////////////
//    RunARound FUNCTION ENDS HERE
//////////////////////////////////////////////////////////////////////////////////////////////

//
// MAIN METHOD
//
method main(inputargs): 
    topofile = inputargs[1]
    vidfile = inputargs[2]
    serverport = parse(inputargs[3])
    mypid = inputargs[3]
    
    // Learn my neighbors by reading the input adjacency list file
    myneighbors;
    
    // Learn myvid and my neighbors vid by reading the vid file
    // Learn L, it is the length of any vid
    L = length(myvid)

    // Now start my serversocket to listen to the incoming packets         
    
    // create a server thread to take care of incoming messages:
    server = Thread(serverThread,server_socket)
    server.start()
    
    round = 1
    // Put my physical neighnor information in the routing table in the round 1
            
    while True:
        runARound(round)
        round = round + 1
        if round > L:
            round = L
        print Routing table at the end of round
        sleep(ROUND_TIME)
        
        
       

